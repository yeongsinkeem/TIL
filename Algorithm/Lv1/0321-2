import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        HashMap<Integer, Double> map = new HashMap<>();
        int fail = 0;
        int total = 0;
        
        // 1. 실패율 계산
        for(int i = 1; i <= N; i++) {
            fail = 0;
            total = 0;
            for(int j = 0; j < stages.length; j++) {
                if( stages[j] == i ) { // 해당 단계 클리어 x 
                    fail ++;
                    total ++;
                }
                else if( stages[j] < i) { // 이전 단계까지 클리어 
                    // continue;
                }
                else { // 클리어 O
                    total++;
                }
                
                if( fail == 0 ) {
                    map.put(i, 0.0);
                }
                else {
                    map.put(i, (double)fail / total);
                }
                // map.put(i, (double)fail / total);
                // 스테이지에 도달한 경우가 없을 경우에 실패율을 0으로 처리하라는 조건
            }
        }
        int[] answer = sortByFailureRate(map);
        
        return answer;
    }
    
        public static int[] sortByFailureRate(Map<Integer, Double> map) {
            // 1. Key 가져오기
            List<Integer> lst = new ArrayList<>(map.keySet());
            
            // 2. Value 기준으로 Key 정렬
            lst.sort( (k1, k2) -> map.get(k2).compareTo(map.get(k1)) );
            
            // 3. 배열로 변환하여 리턴 준비
            int[] answer = new int[lst.size()];
            
            for(int i = 0; i < answer.length; i++) {
                answer[i] = lst.get(i);
            }
            
        return answer;
    }
}
