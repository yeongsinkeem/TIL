import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        HashMap<Integer, Double> map = new HashMap<>();
        int fail = 0;
        int total = 0;
        
        // 1. 실패율 계산
        for(int i = 1; i <= N; i++) {
            fail = 0;
            total = 0;
            for(int j = 0; j < stages.length; j++) {
                // 클리어 x
                if( stages[j] == i ) {
                    fail ++;
                    total ++;
                }
                else if( stages[j] < i) {
                    // continue;
                }
                else {
                    total++;
                }
                map.put(i, (double)fail / total);
            }
        }
        int[] answer = sortByFailureRate(map);
        
        return answer;
    }
    
        public static int[] sortByFailureRate(Map<Integer, Double> map) {
        // 1. keySet을 List로 변환
        List<Integer> lst = new ArrayList<>(map.keySet());

        // 2. value 기준 내림차순 정렬
        lst.sort((k1, k2) -> map.get(k2).compareTo(map.get(k1)));

        // 3. 정렬된 key를 answer 배열에 저장
        int[] answer = new int[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            answer[i] = lst.get(i);  // key 값 저장
        }

        return answer;
    }
}
